require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe Api::ProjectsController, type: :controller do
  let(:valid_attributes) { attributes_for(:project) }
  #
  # let(:invalid_attributes) {
  #   skip("Add a hash of attributes invalid for your model")
  # }


  # let(:valid_session) { {} }

  describe "GET #index" do
    before do
      @projects = []
      5.times { @projects << Project.create!(valid_attributes) }
    end

    after do
      @projects = nil
      Project.destroy_all
    end

    it "assigns all projects as @projects" do
      get :index, format: :json

      expect(response).to render_template(:index)
      expect(assigns(:projects)).to eq(@projects)
    end
  end

  describe "GET #show" do
    it "assigns the requested project as @project" do
      project = Project.create! valid_attributes

      get :show, format: :json, id: project.to_param

      expect(response).to render_template(:show)
      expect(assigns(:project)).to eq(project)
    end
  end

  describe "POST #create" do
    after do
      Project.destroy_all
    end

    context "with valid params" do
      it "creates a new Project" do
        expect {
          post :create, format: :json, project: valid_attributes
        }.to change(Project, :count).by(1)
      end

      it "assigns a newly created project as @project" do
        post :create, format: :json, project: valid_attributes

        expect(assigns(:project)).to be_a(Project)
        expect(assigns(:project)).to be_persisted
      end

      it "creates project with valid attribues" do
        post :create, format: :json, project: valid_attributes

        expect(assigns(:project)).to have_attributes(valid_attributes)
      end
    end

    xcontext "with invalid params" do
      it "assigns a newly created but unsaved project as @project" do
        post :create, {:project => invalid_attributes}, valid_session
        expect(assigns(:project)).to be_a_new(Project)
      end

      it "re-renders the 'new' template" do
        post :create, {:project => invalid_attributes}, valid_session
        expect(response).to render_template("new")
      end
    end
  end

  describe "PUT #update" do
    before do
      @project = Project.create!(valid_attributes)
    end

    after do
      @project.destroy!
    end

    context "with valid params" do
      let(:new_attributes) { attributes_for(:project, name: 'qwerty') }

      it "updates the requested project" do
        # project = Project.create! valid_attributes
        put :update, format: :json, id: @project.to_param, project: new_attributes

        @project.reload

        expect(@project).to have_attributes(new_attributes)
      end

      it "assigns the requested project as @project" do
        put :update, format: :json, id: @project.to_param, project: new_attributes

        expect(assigns(:project)).to eq(@project)
      end

      xit "redirects to the project" do
        project = Project.create! valid_attributes
        put :update, {:id => project.to_param, :project => valid_attributes}, valid_session
        expect(response).to redirect_to(project)
      end
    end

    xcontext "with invalid params" do
      it "assigns the project as @project" do
        project = Project.create! valid_attributes
        put :update, {:id => project.to_param, :project => invalid_attributes}, valid_session
        expect(assigns(:project)).to eq(project)
      end

      it "re-renders the 'edit' template" do
        project = Project.create! valid_attributes
        put :update, {:id => project.to_param, :project => invalid_attributes}, valid_session
        expect(response).to render_template("edit")
      end
    end
  end

  describe "DELETE #destroy" do
    before do
      @project = Project.create! valid_attributes
    end

    after do
      @project.destroy!
    end

    it "destroys the requested project" do
      expect {
        delete :destroy, format: :json, id: @project.to_param
      }.to change(Project, :count).by(-1)
    end

    xit "redirects to the projects list" do
      project = Project.create! valid_attributes
      delete :destroy, {:id => project.to_param}, valid_session
      expect(response).to redirect_to(projects_url)
    end
  end

end
